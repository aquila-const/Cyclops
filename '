#include "toolset.hpp"
#include "imgui.h"
#include <iostream>
#include <libusb-1.0/libusb.h>
#include <stdio.h>
namespace ToolSetState::Toolset {
    struct libusb_context *ctx;
    struct usb_obj {

    };
    struct device_data {
        std::string device_name;
    };
    struct device_ {
        int id;
        struct device_data *dev_data;
        struct usb_obj *usb_data;
        int next;
    };
    void
    update_device_state(struct device_ *dev_)
    {

    }
    void
    acquire_device(libusb_device **devs, struct device_data dev_data)
    {
        libusb_device *dev{};
        int i = 0;
        int j = 0;


        while((dev = devs[i++]) != nullptr)
        {
            struct libusb_device_descriptor desc = {};
            libusb_device_handle *handle;

            int ret = 0;
            unsigned char string[] = {0};
            int r = libusb_get_device_descriptor(dev, &desc);
            if(r<0) std::cout << stderr << "failed to get device descriptor\n" << std::endl;
            ret = libusb_open(dev, &handle);

            std::cout << "Returned response -> " << ret << "\n" << std::endl;
            if(LIBUSB_SUCCESS == ret)
            {
                printf("get %04x:%04x device descriptor", desc.idVendor, desc.idProduct);
                printf("iProduct[%d]\n", desc.iProduct);

                ret = libusb_get_string_descriptor_ascii(handle, desc.iProduct, string, sizeof(string));
                if(ret > 0) printf("%s",string);
                for (int i = 0; i < sizeof(string); i++) {
                    dev_data.device_name.push_back(string[i]);
                }
                //if(sizeof(dev_data.device_name) == sizeof(string)) dev = nullptr;
            } else {
                dev_data.device_name = "Cannot access device.";
                (dev = devs[i++]) = nullptr;
            }
            if(sizeof(dev_data.device_name) == sizeof(string))
            {
                (dev = devs[i++]) = nullptr;
            } else {
                dev_data.device_name = "Not found.";
                (dev = devs[i++]) = nullptr;
            }
        }
    }
}
namespace Toolset
{

    //TODO: get pid and vid from libusb
    void FlasherView()
    {
        libusb_device **devs;
        ToolSetState::Toolset::device_data dev_data;
        int r;
        ssize_t cnt;

        r = libusb_init(&ToolSetState::Toolset::ctx);

        cnt = libusb_get_device_list(nullptr, &devs);
        if(cnt < 0) libusb_exit(nullptr);
        ToolSetState::Toolset::acquire_device(devs, dev_data);
        libusb_free_device_list(devs, 1);
        libusb_exit(nullptr);
        ImGui::Begin("Flasher", nullptr);
        ImGui::Text("Device name.");
        ImGui::Text(dev_data.device_name.c_str());
        ImGui::Button("Flash Device");
        ImGui::End();
    }
}
